#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

clearup ()
{
    set +x
    rm -f "$apijson"
    rm -f "$tmpjson"
}

trap clearup EXIT INT TERM

apijson=$(mktemp -u /tmp/json-XXXXXX)
tmpjson=$(mktemp -u /tmp/json-XXXXXX)

exec 3>&1
exec 1>&2
payload="$(cat <&0)"

if [ "$(jq -r '.source | has("url")' <<< "$payload")" = 'true' ]; then
    url="$(jq -r .source.url <<< "$payload")"
else
    echo 'You need to provide the url for Jira REST APIs.'
    exit 1
fi

if [ "$(jq -r '.source | has("user")' <<< "$payload")" = 'true' ]; then
    user="$(jq -r .source.user <<< "$payload")"
else
    echo 'You need to provide the user for Jira REST APIs.'
    exit 1
fi

if [ "$(jq -r '.source | has("token")' <<< "$payload")" = 'true' ]; then
    token="$(jq -r .source.token <<< "$payload")"
else
    echo 'You need to provide the token for Jira REST APIs.'
    exit 1
fi

if [ "$(jq -r '.source | has("resource")' <<< "$payload")" = 'true' ]; then
    resource="$(jq -r .source.resource <<< "$payload")"
else
    echo 'You need to provide the resource path for Jira REST APIs.'
    exit 1
fi

fetch="$(jq -r '.source.fetch // ""' <<< "$payload")"

if [ "$(jq -r '.source | has("debug")' <<< "$payload")" = 'true' ]; then
    debug="$(jq -r .source.debug <<< "$payload")"
else
    debug=
fi

if [ -n "$debug" ] && [ "$debug" = "verbose" ]; then
    set -x
fi

if [ -n "$debug" ]; then
    printenv
    [ "$(jq -r 'has("version")' <<< "$payload")" = 'true' ] && jq -r -S -C '.version' <<< "$payload"
fi


CURL=(curl --retry 3 --max-time 10 -fSL --user "$user:$token")

URL="$url$resource"
case "$0" in
    ('/opt/resource/check')
        [ -z "$debug" ] && echo "curl -fSL ${URL}"
        "${CURL[@]}" "$URL" > "$apijson"
        if [ -n "$fetch" ] && [ "$(jq -r 'has("startAt")' < "$apijson")" = "true" ] && [ "$(jq -r 'has("total")' < "$apijson")" = "true" ] && [ "$(jq -r "has(\"$fetch\")" < "$apijson")" = "true" ]; then
            startAt="$(jq -r '.startAt' < "$apijson")"
            maxResults="$(jq -r '.maxResults // 50' < "$apijson")"
            total="$(jq -r '.total' < "$apijson")"
            next=$((startAt+maxResults))
            while [ "$next" -lt "$total" ]; do
                mv "$apijson" "$tmpjson"
                "${CURL[@]}" "$URL&startAt=$next" > "$apijson"
                jq --slurpfile prev "$tmpjson" ".$fetch += \$prev[].$fetch" "$apijson" > tmp.json
                mv tmp.json "$apijson"
                startAt="$(jq -r '.startAt' < "$apijson")"
                maxResults="$(jq -r '.maxResults // 50' < "$apijson")"
                total="$(jq -r '.total' < "$apijson")"
                next=$((startAt+maxResults))
            done
        fi
        digest=$(jq -S -M < "$apijson" | sha256sum | awk '{print $1}')
        json=$(cat <<ENDLINE
[
  {
    "digest": "sha256:${digest}"
  }
]
ENDLINE
)
        ;;
    ('/opt/resource/in')
        [ -z "$debug" ] && echo "curl -fSL ${URL}"
        "${CURL[@]}" "$URL" > "$apijson"
        if [ -n "$fetch" ] && [ "$(jq -r 'has("startAt")' < "$apijson")" = "true" ] && [ "$(jq -r 'has("total")' < "$apijson")" = "true" ] && [ "$(jq -r "has(\"$fetch\")" < "$apijson")" = "true" ]; then
            startAt="$(jq -r '.startAt' < "$apijson")"
            maxResults="$(jq -r '.maxResults // 50' < "$apijson")"
            total="$(jq -r '.total' < "$apijson")"
            next=$((startAt+maxResults))
            while [ "$next" -lt "$total" ]; do
                mv "$apijson" "$tmpjson"
                "${CURL[@]}" "$URL&startAt=$next" > "$apijson"
                jq --slurpfile prev "$tmpjson" ".$fetch += \$prev[].$fetch" "$apijson" > tmp.json
                mv tmp.json "$apijson"
                startAt="$(jq -r '.startAt' < "$apijson")"
                maxResults="$(jq -r '.maxResults // 50' < "$apijson")"
                total="$(jq -r '.total' < "$apijson")"
                next=$((startAt+maxResults))
            done
        fi
        cp "$apijson" "$1"/payload.json
        digest=$(jq -S -M < "$apijson" | sha256sum | awk '{print $1}')
        json=$(cat <<ENDLINE
{
  "version": {
    "digest": "sha256:${digest}"
  },
  "metadata": [
    {
      "name": "resource",
      "value": "$(echo "$resource" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')"
    }
  ]
}
ENDLINE
)
        ;;
    ('/opt/resource/out')
        if [ "$(jq -r '.params | has("json")' <<< "$payload")" = 'false' ]; then
            echo 'You need to provide the json param in the put step.'
            exit 1
        fi
        cd "$1"
        DATA=$(jq -r '.params.json' <<< "$payload")
        if [ -f "$DATA" ]; then
            if ! jq -r -S -C < "$DATA"; then
                echo "The json param doesn't contain the valid json content or the existing file path."
                exit 1
            fi
            DATA="@$DATA"
        else
            if ! jq -r -S -C <<< "$DATA"; then
                echo "The json param doesn't contain the valid json content or the existing file path."
                if [ -n "$debug" ]; then
                    echo "$DATA"
                fi
                exit 1
            fi
        fi
        if [[ "$resource" =~ [0-9]+$ ]]; then
            METHOD=(-X PUT)
        else
            METHOD=(-X POST)
        fi
        [ -z "$debug" ] && echo "curl -fSL ${METHOD[*]} --data \"$DATA\" -H \"Content-Type: application/json\" ${URL}"
        "${CURL[@]}" "${METHOD[@]}" --data "$DATA" -H "Content-Type: application/json" "$URL" > "$apijson"
        if [ -s "$apijson" ] && [ -n "$debug" ] && [ "$debug" = "verbose" ]; then
            jq -r -S -C < "$apijson"
        fi
        if [[ "$resource" =~ [0-9]+$ ]]; then
            [ -z "$debug" ] && echo "curl -fSL ${URL}"
            "${CURL[@]}" "$URL" > "$apijson"
            if [ -n "$debug" ] && [ "$debug" = "verbose" ]; then
                jq -r -S -C < "$apijson"
            fi
        fi
        digest=$(jq -S -M < "$apijson" | sha256sum | awk '{print $1}')
        json=$(cat <<ENDLINE
{
  "version": {
    "digest": "sha256:${digest}"
  },
  "metadata": [
    {
      "name": "resource",
      "value": "$(echo "$resource" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')"
    }
  ]
}
ENDLINE
)
        ;;
esac

echo "$json" > "$tmpjson"
if [ -n "$debug" ]; then
    if jq -S -M < "$tmpjson" > /dev/null; then
        jq -r -S -C < "$tmpjson"
    else
        cat "$tmpjson"
    fi
fi
sed -i 's/\t/ /g' "$tmpjson"
jq -n --slurpfile all "$tmpjson" '$all[0]' >&3
